"""
Allow admin to manage user roster/contacts.
"""
type RosterAdminMutation @protected{
  "Add a new contact to a user's roster without subscription"
  addContact(user: JID!, contact: JID!, name: String, groups: [String!]): String
    @protected(type: DOMAIN, args: ["user"])
  "Add new contacts to a user's roster without subscription"
  addContacts(user: JID!, contacts: [ContactInput!]!) : [String]!
    @protected(type: DOMAIN, args: ["user"])
  "Manage the user's subscription to the contact"
  subscription(user: JID!, contact: JID!, action: SubAction!): String
    @protected(type: DOMAIN, args: ["user"])
  "Delete user's contact"
  deleteContact(user: JID!, contact: JID!): String
    @protected(type: DOMAIN, args: ["user"])
  "Delete user's contacts"
  deleteContacts(user: JID!, contacts: [JID!]!): [String]!
    @protected(type: DOMAIN, args: ["user"])
  "Manage mutual subscription between given users"
  setMutualSubscription(userA: JID!, userB: JID!, action: MutualSubAction!): String
    @protected(type: DOMAIN, args: ["userA", "userB"])
  "Set mutual subscriptions between the user and each of the given contacts"
  subscribeToAll(user: ContactInput!, contacts: [ContactInput!]!): [String]!
    @protected(type: DOMAIN, args: ["user.jid"])
  "Set mutual subscriptions between all of the given contacts"
  subscribeAllToAll(contacts: [ContactInput!]!): [String]!
    @protected(type: DOMAIN, args: ["contacts.jid"])
}

"""
Allow admin to get information about user roster/contacts.
"""
type RosterAdminQuery @protected{
  "Get the user's roster/contacts"
  listContacts(user: JID!): [Contact!]
    @protected(type: DOMAIN, args: ["user"])
  "Get the information about the user's specific contact"
  getContact(user: JID!, contact: JID!): Contact
    @protected(type: DOMAIN, args: ["user"])
}
